version: 2.1
commands:
  client-test:
    parameters:
      project:
        type: string
        default: "Client.Test"
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            dotnet restore
            dotnet build --no-restore
      - run:
          name: Create a temp directory for artifacts
          command: |
            mkdir -p /tmp/artifacts
            mkdir test-results
      - run:
          name: Run tests
          command: dotnet test << parameters.project >> --collect "Xplat Code Coverage" --logger "junit;LogFilePath=../test-results/test-result.xml"
      - run:
          name: Coverage Report
          command: |
            dotnet tool install --tool-path="./reportgenerator/" dotnet-reportgenerator-globaltool
            ./reportgenerator/reportgenerator -reports:"<< parameters.project >>/TestResults/*/coverage.cobertura.xml" -targetdir:"report" -reporttypes:HtmlSummary "-sourcedirs:Client/"
            mv report/summary.html /tmp/artifacts
            cp test-results/test-result.xml /tmp/artifacts
          when: always
      - run:
          name: Report test results to codecov
          command: |
            apt-get update
            apt-get install gpg --yes
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov
      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: test-results


jobs:
  tests-unit:
    working_directory: ~/repo
    docker:
      - image: &default-dotnet-image "mcr.microsoft.com/dotnet/sdk:7.0"
    steps:
      - client-test:
          project: "Client.Test"
  tests-integration:
    working_directory: ~/repo
    docker:
      - image: *default-dotnet-image
        environment:
          FLIGHT_SQL_URL: "https://localhost:31337"
      - image: voltrondata/flight-sql:latest
        environment:
          FLIGHT_PASSWORD: "flight_password"
          PRINT_QUERIES: "1"
    steps:
      - client-test:
          project: "Client.Test.Integration"
          
  check-compilation-warnings:
    docker:
      - image: *default-dotnet-image
    steps:
      - checkout
      - run:
          name: Check compilation warnings
          command: |
            dotnet clean --configuration Release
            dotnet build --configuration Release

workflows:
  version: 2
  build:
    jobs:
      - check-compilation-warnings
      - tests-unit
      - tests-integration:
          requires:
            - "tests-unit"