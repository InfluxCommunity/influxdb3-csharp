version: 2.1
commands:
  client-test:
    parameters:
      project:
        type: string
        default: "Client.Test"
      exe:
        type: executor
        default: docker-amd64-image
    steps:
      - run:
          name: Install Dependencies
          command: |
            dotnet restore
            dotnet build --no-restore
      - run:
          name: Create a temp directory for artifacts
          command: |
            mkdir -p /tmp/artifacts
            mkdir test-results
      - run:
          name: Run tests
          command: dotnet test << parameters.project >> --collect "Xplat Code Coverage" --logger "junit;LogFilePath=../test-results/test-result.xml"
      - run:
          name: Coverage Report
          command: |
            dotnet tool install --tool-path="./reportgenerator/" dotnet-reportgenerator-globaltool
            ./reportgenerator/reportgenerator -reports:"<< parameters.project >>/TestResults/*/coverage.cobertura.xml" -targetdir:"report" -reporttypes:HtmlSummary "-sourcedirs:Client/"
            mv report/summary.html /tmp/artifacts
            cp test-results/test-result.xml /tmp/artifacts
          when: always
      - when:
          condition:
            equal: [ docker-amd64-image, << parameters.exe >> ]
          steps:
            - upload-codecov-amd64
      - when:
          condition:
            equal: [ docker-arm64-image, << parameters.exe >> ]
          steps:
            - upload-codecov-arm64
      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: test-results
  upload-codecov-amd64:
    steps:
      - run:
          name: Collecting coverage reports
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov
  upload-codecov-arm64:
    steps:
      - run:
          name: Collecting coverage reports
          command: |
            curl -k https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            sudo chmod +x codecov

parameters:
  default-dotnet-image:
    type: string
    default: "mcr.microsoft.com/dotnet/sdk:8.0"

executors:
  docker-amd64-image:
    parameters:
      dotnet-image:
        type: string
        default: << pipeline.parameters.default-dotnet-image >>
    docker:
      - image: <<parameters.dotnet-image>>
      - image: influxdb:3-core
        environment:
          - INFLUXDB3_NODE_IDENTIFIER_PREFIX=node01
          - INFLUXDB3_OBJECT_STORE=file
          - INFLUXDB3_DB_DIR=/var/lib/influxdb3/data
  docker-arm64-image:
    parameters:
      dotnet-image:
        type: string
        default: << pipeline.parameters.default-dotnet-image >>
    docker:
      - image: <<parameters.dotnet-image>>
      - image: influxdb:3-core
        environment:
          - INFLUXDB3_NODE_IDENTIFIER_PREFIX=node01
          - INFLUXDB3_OBJECT_STORE=file
          - INFLUXDB3_DB_DIR=/var/lib/influxdb3/data
    resource_class: arm.medium

jobs:
  tests-unit:
    working_directory: ~/repo
    parameters:
      dotnet-image:
        type: string
        default: << pipeline.parameters.default-dotnet-image >>
      exe:
        type: executor
        default: docker-amd64-image
    executor: << parameters.exe >>
    steps:
      - checkout
      - client-test:
          exe: << parameters.exe >>
          project: "Client.Test"
  tests-integration:
    working_directory: ~/repo
    parameters:
      dotnet-image:
        type: string
        default: << pipeline.parameters.default-dotnet-image >>
      exe:
        type: executor
        default: docker-amd64-image
    executor: << parameters.exe >>
    steps:
      - checkout
      - run:
          name: Install jq
          command: |
            apt-get update
            apt-get install -y jq
      - run:
          name: Setup InfluxDB service
          command: |
            ./Scripts/influxdb-setup.sh \
              --export-url-as TESTING_INFLUXDB_URL \
              --export-db-as TESTING_INFLUXDB_DATABASE \
              --export-token-as TESTING_INFLUXDB_TOKEN
      - client-test:
          project: "Client.Test.Integration"

  check-compilation-warnings:
    docker:
      - image: << pipeline.parameters.default-dotnet-image >>
    steps:
      - checkout
      - run:
          name: Check compilation warnings
          command: |
            dotnet clean --configuration Release
            dotnet build --configuration Release

  deploy-preview:
    docker:
      - image: <<pipeline.parameters.default-dotnet-image>>
    steps:
      - run:
          name: Early return if this build is from a forked repository
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "InfluxCommunity" ]]; then
              echo "Nothing to do for forked repositories, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - run:
          name: Deploying To Preview Repository
          command: |
            dotnet pack Client --version-suffix=dev.$CIRCLE_BUILD_NUM
            dotnet nuget push ./Client/bin/Release/InfluxDB3.Client.*-dev.$CIRCLE_BUILD_NUM.nupkg -k ${NUGET_KEY} -s https://api.nuget.org/v3/index.json

workflows:
  version: 2
  build_something:
    jobs:
      - check-compilation-warnings
      - tests-unit:
          matrix:
            parameters:
              exe: [ docker-amd64-image, docker-arm64-image ]
              dotnet-image: [ << pipeline.parameters.default-dotnet-image >> ]
      - tests-integration:
          matrix:
            parameters:
              exe: [ docker-amd64-image, docker-arm64-image ]
              dotnet-image: [ << pipeline.parameters.default-dotnet-image >> ]
          requires:
            - "tests-unit"
      - deploy-preview:
          requires:
            - tests-integration
          filters:
            branches:
              only: main
